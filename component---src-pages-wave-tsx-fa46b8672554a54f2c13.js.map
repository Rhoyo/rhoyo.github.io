{"version":3,"file":"component---src-pages-wave-tsx-fa46b8672554a54f2c13.js","mappings":"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","sources":["webpack://rhoyo/./src/ts/waveHelper.ts","webpack://rhoyo/./src/components/waveScene.tsx","webpack://rhoyo/./src/pages/wave.tsx"],"sourcesContent":["import * as THREE from 'three';\n// Function to create the wave mesh\nexport function createWave(radiusTop: number, radiusBottom: number, radiusX: number, radiusY: number, height: number, radialSegments: number, heightSegments: number, thetaStart: number, thetaLength: number): THREE.Mesh {\n  const geometry = new THREE.CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, true, thetaStart, thetaLength);\n  \n  // Modify vertices to form an oval shape\n  const positionAttribute = geometry.getAttribute('position');\n  const vector = new THREE.Vector3();\n  for (let i = 0; i < positionAttribute.count; i++) {\n      vector.fromBufferAttribute(positionAttribute, i);\n      \n\n      // NEED TO CHECK THE BOTTOM HALF OF THE OVAL ITS THE SHOULDER THAT GROWS BUT SLOWER\n      // THE TOP HALF OF THE OVAL SHOULD EXPAND FASTER THAN THE BOTTOM\n\n      // 3rd quadrant\n\n      // Adjust the radius for the top and bottom\n      const radius = vector.y > 0 ? radiusTop : radiusBottom;\n      \n      vector.x *= (radiusX / radius);\n      vector.z *= (radiusY / radius);\n      \n      positionAttribute.setXYZ(i, vector.x, vector.y, vector.z);\n  }\n  positionAttribute.needsUpdate = true;\n\n  // Create a gradient texture\n  const canvas = document.createElement('canvas');\n  canvas.width = 512;\n  canvas.height = 512;\n  const ctx = canvas.getContext('2d');\n  if (ctx) {\n    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n    gradient.addColorStop(0, \"#edd69d\"); //edd69d //47dded\n    gradient.addColorStop(0.35, \"#edd69d\");\n    gradient.addColorStop(0.7, \"#47dded\");\n    gradient.addColorStop(1, '#f5f0da');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  const texture = new THREE.CanvasTexture(canvas);\n  const bumpTexture = new THREE.TextureLoader().load('https://raw.githubusercontent.com/Rhoyo/rhoyo.github.io-src/refs/heads/main/src/images/wave-bump-map-1.png');\n  // Use a light-sensitive material\n  const material = new THREE.MeshStandardMaterial({\n    map: texture,\n    opacity: 0.5,\n    roughness: 0.2,  // How rough the surface appears (0 = shiny, 1 = matte)\n    metalness: 0.2,  // How metallic the surface appears (0 = non-metallic, 1 = metallic)\n    aoMap: bumpTexture,\n    emissive: new THREE.Color(0x47dded),\n    emissiveIntensity: 0.1,\n    transparent: true,\n    side: THREE.BackSide, // To make the inside of the wave visible\n  });\n\n\n  // const material = new THREE.MeshBasicMaterial({ color: 0x00aaff, side: THREE.BackSide, wireframe: true }); // Enable wireframe\n  const waveMesh = new THREE.Mesh(geometry, material);\n  waveMesh.rotation.x = Math.PI / 2;\n  waveMesh.rotation.y = Math.PI / 3;\n  return waveMesh;\n}\n\n// Function to create the particle system for the spray effect\nexport function createParticles(): THREE.Points {\n  const particleCount = 3000;\n  const particles = new THREE.BufferGeometry();\n  const positions = new Float32Array(particleCount * 3);\n  const velocities = new Float32Array(particleCount * 3);\n\n  for (let i = 0; i < particleCount; i++) {\n    positions[i * 3] = Math.random() * 2 - 1;\n    positions[i * 3 + 1] = Math.random() * 2 - 1;\n    positions[i * 3 + 2] = Math.random() * 15 - 5;\n  }\n\n  particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n  let particleMaterial = new THREE.PointsMaterial({\n    color: 0xffffff,\n    size: 0.005\n  });\n\n  return new THREE.Points(particles, particleMaterial);\n}\n\n","import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { createWave, createParticles } from '../ts/waveHelper';\n\nconst WaveScene: React.FC = () => {\n  const mountRef = useRef<HTMLDivElement>(null);\n\n  // Wave Vars\n  const [radiusTop, setRadiusTop] = useState(1);\n  const [radiusBottom, setRadiusBottom] = useState(1);\n  const [radiusX, setRadiusX] = useState(10); // Radius for X-axis\n  const [radiusY, setRadiusY] = useState(6); // Radius for Y-axis\n  const [height, setHeight] = useState(100);\n  const [radialSegments, setRadialSegments] = useState(8);\n  const [heightSegments, setHeightSegments] = useState(10);\n  const [thetaLength, setThetaLength] = useState(Math.PI * 0.5); // Start at 0.5 radian\n  const thetaStart = Math.PI * 1.5; // 225 degrees in radians\n\n  useEffect(() => {\n    const currentMount = mountRef.current;\n    if (!currentMount) return;\n\n    // Set up the scene, camera, and renderer\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x222222); \n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const light = new THREE.DirectionalLight(0xf5f0da, 5); // increase the light's intensity\n    light.position.set(0, 1000, -500); // set the light's position to a high altitude\n    light.target.position.set(0, 0, 0); // set the light's target to the origin\n    \n    scene.add(light); \n    scene.add(camera);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentMount.appendChild(renderer.domElement);\n    let animationID: number;\n\n    // Create initial wave/tunnel and shoulder geometry\n    let wave = createWave(\n      radiusTop,\n      radiusBottom, \n      radiusX, \n      radiusY, \n      height, \n      radialSegments, \n      heightSegments, \n      thetaStart, \n      thetaLength);\n    const particles = createParticles();\n    wave.add(particles);\n    scene.add(wave);\n\n    // Add portfolio elements (example: a simple box)\n    const boxGeometry = new THREE.BoxGeometry(1, 1, 1);\n    const boxMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const box = new THREE.Mesh(boxGeometry, boxMaterial);\n    box.position.z = -50;\n    scene.add(box);\n\n    // Update wave geometry on scroll\n    const handleScroll = (event: WheelEvent) => {\n      // console.log(thetaLength);\n      if (event.deltaY > 0) {\n        // Scrolling up\n\n        // Wave dynamics effects\n        setThetaLength(prev => Math.min(2 * Math.PI, prev + 0.1));\n        setRadialSegments(prev => Math.min(64, prev + 0.8));\n        setHeightSegments(prev => Math.min(64, prev + 0.8));\n        // Barrel Surf Effect\n        setRadiusX(prev => Math.min(30, prev + 0.75));\n        setRadiusY(prev => Math.min(18, prev + 0.75));\n\n      } else {\n        // Scrolling down\n\n        // Wave dynamics effects\n        setThetaLength(prev => Math.max(0, prev - 0.1));\n        setRadialSegments(prev => Math.max(8, prev - 0.8));\n        setHeightSegments(prev => Math.max(8, prev - 0.8));\n        // Barrel Surf Effect\n        setRadiusX(prev => Math.max(10, prev - 0.75));\n        setRadiusY(prev => Math.max(6, prev - 0.75));\n\n      }\n    };\n\n    window.addEventListener('wheel', handleScroll);\n    // Animation loop\n    const animate = () => { \n      animationID = requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup on unmount\n    return () => {\n      // Remove renderer from DOM\n      if (renderer.domElement && currentMount.contains(renderer.domElement)) {\n        currentMount.removeChild(renderer.domElement);\n      }\n      // Dispose wave geometry\n      wave.geometry.dispose();\n\n      // Dispose other objects in the scene (example: box)\n      box.geometry.dispose();\n      box.material.dispose();\n\n      // Cancel animation frame\n      cancelAnimationFrame(animationID);\n\n      // Remove event listeners\n      window.removeEventListener('wheel', handleScroll);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [radiusTop, radiusBottom, radiusX, radiusY, height, radialSegments, heightSegments, thetaLength]);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Update wave geometry\n    const scene = new THREE.Scene();\n    const wave = createWave(\n      radiusTop,\n      radiusBottom, \n      radiusX, \n      radiusY, \n      height, \n      radialSegments, \n      heightSegments, \n      thetaStart, \n      thetaLength);\n    scene.add(wave);\n\n  }, [radiusTop, radiusBottom, radiusX, radiusY, height, radialSegments, heightSegments, thetaLength]);\n\n  return <div ref={mountRef} />;\n};\n\nexport default WaveScene;\n","import * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport { ThemeProvider } from '@mui/material/styles';\nimport theme from \"../theme\"\nimport '../style/components.css';\n\n// components\nimport WaveScene from \"../components/waveScene\";\n\nconst WavePage: React.FC<PageProps> = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <main style={{\n        backgroundColor: theme.palette.background.default, \n        minHeight: '100vh', \n        color: theme.palette.text.primary,\n      }}>\n      <div className=\"waveScene\">\n        <WaveScene/>\n      </div>\n      </main>\n    </ThemeProvider>\n  )\n}\n\nexport default WavePage;\n\nexport const Head: HeadFC = () => <title>Rho: waveScene</title>\n"],"names":["createWave","radiusTop","radiusBottom","radiusX","radiusY","height","radialSegments","heightSegments","thetaStart","thetaLength","geometry","THREE","positionAttribute","getAttribute","vector","i","count","fromBufferAttribute","radius","y","x","z","setXYZ","needsUpdate","canvas","document","createElement","width","ctx","getContext","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","texture","bumpTexture","load","material","map","opacity","roughness","metalness","aoMap","emissive","emissiveIntensity","transparent","side","waveMesh","rotation","Math","PI","WaveScene","mountRef","useRef","setRadiusTop","useState","setRadiusBottom","setRadiusX","setRadiusY","setHeight","setRadialSegments","setHeightSegments","setThetaLength","useEffect","currentMount","current","scene","background","camera","window","innerWidth","innerHeight","light","position","set","target","add","renderer","animationID","setSize","appendChild","domElement","wave","particles","particleCount","positions","Float32Array","random","setAttribute","particleMaterial","color","size","createParticles","boxGeometry","boxMaterial","box","handleScroll","event","deltaY","prev","min","max","addEventListener","animate","requestAnimationFrame","render","handleResize","aspect","updateProjectionMatrix","contains","removeChild","dispose","cancelAnimationFrame","removeEventListener","React","ref","WavePage","ThemeProvider","theme","style","backgroundColor","palette","default","minHeight","text","primary","className","Head"],"sourceRoot":""}