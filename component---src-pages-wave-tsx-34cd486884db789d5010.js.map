{"version":3,"file":"component---src-pages-wave-tsx-34cd486884db789d5010.js","mappings":"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","sources":["webpack://rhoyo/./src/ts/waveHelper.ts","webpack://rhoyo/./src/components/waveScene.tsx","webpack://rhoyo/./src/pages/wave.tsx"],"sourcesContent":["import * as THREE from 'three';\n\n// Function to create the wave mesh\nexport function createWave(radiusTop: number, radiusBottom: number, radiusX: number, radiusY: number, height: number, radialSegments: number, heightSegments: number, thetaStart: number, thetaLength: number): THREE.Mesh {\n  const geometry = new THREE.CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, true, thetaStart, thetaLength);\n  \n  // Modify vertices to form an oval shape\n  const positionAttribute = geometry.getAttribute('position');\n  const vector = new THREE.Vector3();\n  for (let i = 0; i < positionAttribute.count; i++) {\n      vector.fromBufferAttribute(positionAttribute, i);\n      \n\n      // NEED TO CHECK THE BOTTOM HALF OF THE OVAL ITS THE SHOULDER THAT GROWS BUT SLOWER\n      // THE TOP HALF OF THE OVAL SHOULD EXPAND FASTER THAN THE BOTTOM\n\n      // 3rd quadrant\n\n      // Adjust the radius for the top and bottom\n      const radius = vector.y > 0 ? radiusTop : radiusBottom;\n      \n      vector.x *= (radiusX / radius);\n      vector.z *= (radiusY / radius);\n      \n      positionAttribute.setXYZ(i, vector.x, vector.y, vector.z);\n  }\n  positionAttribute.needsUpdate = true;\n\n  // Create a gradient texture\n  const canvas = document.createElement('canvas');\n  canvas.width = 512;\n  canvas.height = 512;\n  const ctx = canvas.getContext('2d');\n  if (ctx) {\n    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n    gradient.addColorStop(0, 'blue');\n    gradient.addColorStop(1, 'white');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  const texture = new THREE.CanvasTexture(canvas);\n\n  // Use a light-sensitive material\n  const material = new THREE.MeshStandardMaterial({\n    map: texture,\n    opacity: 0.8,\n    roughness: 0.75,  // How rough the surface appears (0 = shiny, 1 = matte)\n    metalness: 0.3,  // How metallic the surface appears (0 = non-metallic, 1 = metallic)\n    side: THREE.BackSide, // To make the inside of the wave visible\n  });\n\n\n  // const material = new THREE.MeshBasicMaterial({ color: 0x00aaff, side: THREE.BackSide, wireframe: true }); // Enable wireframe\n  const waveMesh = new THREE.Mesh(geometry, material);\n  waveMesh.rotation.x = Math.PI / 2;\n  waveMesh.rotation.y = Math.PI / 3;\n  return waveMesh;\n}\n\n// Function to create the particle system for the spray effect\nexport function createParticles(radiusX: number, radiusY: number, height: number, thetaLength: number): THREE.Points {\n  const particleCount = 1000;\n  const particles = new THREE.BufferGeometry();\n  const particlePositions = new Float32Array(particleCount * 3);\n  const particleVelocities = new Float32Array(particleCount * 3);\n\n  for (let i = 0; i < particleCount; i++) {\n    const theta = thetaLength + Math.PI * 1.25 + Math.random() * 0.1 - 0.05; // Spread particles around thetaStart\n    const x = radiusX * Math.cos(theta);\n    const y = radiusY * Math.sin(theta);\n    const z = Math.random() * height - height / 2;\n\n    particlePositions[i * 3] = x;\n    particlePositions[i * 3 + 1] = y;\n    particlePositions[i * 3 + 2] = z;\n\n    particleVelocities[i * 3] = (Math.random() - 0.5) * 2;\n    particleVelocities[i * 3 + 1] = (Math.random() - 0.5) * 2;\n    particleVelocities[i * 3 + 2] = (Math.random() - 0.5) * 2;\n  }\n\n  particles.setAttribute('position', new THREE.BufferAttribute(particlePositions, 3));\n  particles.setAttribute('velocity', new THREE.BufferAttribute(particleVelocities, 3));\n\n  let particleMaterial = new THREE.PointsMaterial({ color: 0xffffff, size: 0.1 });\n\n  return new THREE.Points(particles, particleMaterial);\n}\n\n","import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { createWave, createParticles } from '../ts/waveHelper';\n\nconst WaveScene: React.FC = () => {\n  const mountRef = useRef<HTMLDivElement>(null);\n\n  // Wave Vars\n  const [radiusTop, setRadiusTop] = useState(1);\n  const [radiusBottom, setRadiusBottom] = useState(1);\n  const [radiusX, setRadiusX] = useState(10); // Radius for X-axis\n  const [radiusY, setRadiusY] = useState(6); // Radius for Y-axis\n  const [height, setHeight] = useState(100);\n  const [radialSegments, setRadialSegments] = useState(8);\n  const [heightSegments, setHeightSegments] = useState(10);\n  const [thetaLength, setThetaLength] = useState(Math.PI * 0.5); // Start at 0.5 radian\n  const thetaStart = Math.PI * 1.5; // 225 degrees in radians\n\n  // Light Camera Vars\n  const [lightZ, setLightZ] = useState(-50);\n\n\n  useEffect(() => {\n    const currentMount = mountRef.current;\n    if (!currentMount) return;\n\n    // Set up the scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const light = new THREE.PointLight(0xffffff, 50, 300); // A point light with a range of 100\n    light.position.set(0, 0, lightZ); // the light should appear at the end of the barrel\n    camera.add(light); \n    scene.add(camera);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentMount.appendChild(renderer.domElement);\n    let animationID: number;\n\n    // Create initial wave/tunnel and shoulder geometry\n    let wave = createWave(\n      radiusTop,\n      radiusBottom, \n      radiusX, \n      radiusY, \n      height, \n      radialSegments, \n      heightSegments, \n      thetaStart, \n      thetaLength);\n    scene.add(wave);\n\n    // Create particle system for spray effect\n    const particles = createParticles(radiusX, radiusY, height, thetaLength);\n    scene.add(particles);\n\n    // Add portfolio elements (example: a simple box)\n    const boxGeometry = new THREE.BoxGeometry(1, 1, 1);\n    const boxMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n    const box = new THREE.Mesh(boxGeometry, boxMaterial);\n    box.position.z = -50;\n    scene.add(box);\n\n    // Update wave geometry on scroll\n    const handleScroll = (event: WheelEvent) => {\n      // console.log(thetaLength);\n      console.log(lightZ);\n      if (event.deltaY > 0) {\n        // Scrolling up\n\n        // Wave dynamics effects\n        setThetaLength(prev => Math.min(2 * Math.PI, prev + 0.1));\n        setRadialSegments(prev => Math.min(64, prev + 0.8));\n        setHeightSegments(prev => Math.min(64, prev + 0.8));\n        // Barrel Surf Effect\n        setRadiusX(prev => Math.min(30, prev + 0.75));\n        setRadiusY(prev => Math.min(18, prev + 0.75));\n        // Light Effect, exiting barrel\n        setLightZ(prev => Math.min(-50, prev + 0.5));\n\n      } else {\n        // Scrolling down\n\n        // Wave dynamics effects\n        setThetaLength(prev => Math.max(0, prev - 0.1));\n        setRadialSegments(prev => Math.max(8, prev - 0.8));\n        setHeightSegments(prev => Math.max(8, prev - 0.8));\n        // Barrel Surf Effect\n        setRadiusX(prev => Math.max(10, prev - 0.75));\n        setRadiusY(prev => Math.max(6, prev - 0.75));\n\n        // Light Effect, moving backwards in barrel\n        setLightZ(prev => Math.max(-20, prev - 0.5));\n      }\n    };\n\n    window.addEventListener('wheel', handleScroll);\n    // Animation loop\n    const animate = () => { \n      animationID = requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup on unmount\n    return () => {\n      // Remove renderer from DOM\n      if (renderer.domElement && currentMount.contains(renderer.domElement)) {\n        currentMount.removeChild(renderer.domElement);\n      }\n      // Dispose wave geometry\n      wave.geometry.dispose();\n\n      // Dispose other objects in the scene (example: box)\n      box.geometry.dispose();\n      box.material.dispose();\n\n      // Cancel animation frame\n      cancelAnimationFrame(animationID);\n\n      // Remove event listeners\n      window.removeEventListener('wheel', handleScroll);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [radiusTop, radiusBottom, radiusX, radiusY, height, radialSegments, heightSegments, thetaLength]);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Update wave geometry\n    const scene = new THREE.Scene();\n    const wave = createWave(\n      radiusTop,\n      radiusBottom, \n      radiusX, \n      radiusY, \n      height, \n      radialSegments, \n      heightSegments, \n      thetaStart, \n      thetaLength);\n    scene.add(wave);\n\n  }, [radiusTop, radiusBottom, radiusX, radiusY, height, radialSegments, heightSegments, thetaLength]);\n\n  return <div ref={mountRef} />;\n};\n\nexport default WaveScene;\n","import * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport { ThemeProvider } from '@mui/material/styles';\nimport theme from \"../theme\"\nimport '../style/components.css';\n\n// components\nimport WaveScene from \"../components/waveScene\";\n\nconst WavePage: React.FC<PageProps> = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <main style={{\n        backgroundColor: theme.palette.background.default, \n        minHeight: '100vh', \n        color: theme.palette.text.primary,\n      }}>\n      <div className=\"waveScene\">\n        <WaveScene/>\n      </div>\n      </main>\n    </ThemeProvider>\n  )\n}\n\nexport default WavePage;\n\nexport const Head: HeadFC = () => <title>Rho: waveScene</title>\n"],"names":["createWave","radiusTop","radiusBottom","radiusX","radiusY","height","radialSegments","heightSegments","thetaStart","thetaLength","geometry","THREE","positionAttribute","getAttribute","vector","i","count","fromBufferAttribute","radius","y","x","z","setXYZ","needsUpdate","canvas","document","createElement","width","ctx","getContext","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","texture","material","map","opacity","roughness","metalness","side","waveMesh","rotation","Math","PI","WaveScene","mountRef","useRef","setRadiusTop","useState","setRadiusBottom","setRadiusX","setRadiusY","setHeight","setRadialSegments","setHeightSegments","setThetaLength","lightZ","setLightZ","useEffect","currentMount","current","scene","camera","window","innerWidth","innerHeight","light","position","set","add","renderer","animationID","setSize","appendChild","domElement","wave","particles","particleCount","particlePositions","Float32Array","particleVelocities","theta","random","cos","sin","setAttribute","particleMaterial","color","size","createParticles","boxGeometry","boxMaterial","box","handleScroll","event","console","log","deltaY","prev","min","max","addEventListener","animate","requestAnimationFrame","render","handleResize","aspect","updateProjectionMatrix","contains","removeChild","dispose","cancelAnimationFrame","removeEventListener","React","ref","WavePage","ThemeProvider","theme","style","backgroundColor","palette","background","default","minHeight","text","primary","className","Head"],"sourceRoot":""}